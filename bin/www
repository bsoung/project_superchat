#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express = require('express');
var app = require('../app');
var debug = require('debug')('project-superchat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create socket server.
 */
app.use(
	'/socket.io',
	express.static(__dirname + 'node_modules/socket.io-client/dist/')
);
const io = require('socket.io')(server);

io.on('connection', client => {
	console.log('New connection request granted');

	// Assign event handlers.
	// Messages
	client.on('send_message', _handleSendMessage.bind(io));

	// Users
	client.on('new_user', _handleNewUser.bind(io));
});

const { saveMessage, saveUser } = require('../lib/redis_wrapper').saveModule;
const { userExists, getUsers } = require('../lib/redis_wrapper').loadModule;
const { hashSync: encodePassword } = require('bcryptjs');

function _handleSendMessage(msgObj) {
	// {
	// 	body: string,
	// 	user_id: integer,
	// 	room_id: integer
	// }

	// Set the gmt_created property.
	msgObj.gmt_created = new Date().getTime();

	saveMessage(msgObj).then(() => {
		console.log(
			`New message: [ UserID: ${msgObj.user_id}, RoomID: ${msgObj.room_id}, Body: ${msgObj.body} ]`
		);

		getUsers(msgObj.user_id).then(user => {
			msgObj.username = user[0].username;
			this.emit('message_sent', msgObj);
		});
	});
}

function _handleNewUser(userObj) {
	userExists(userObj.username).then(exists => {
		if (exists) {
			this.emit('error_user_exists');
		} else {
			userObj.password = encodePassword(userObj.password);
			saveUser(userObj).then(() => {
				console.log(
					`New message: User data was saved! [ UserID: ${userObj.username}, RoomID: ${userObj.password} ]`
				);

				// Get the newly created user's id from redis.
				getUsers().then(users => {
					let userId = users.find(user => user.username === userObj.username)
						.id;
					userObj.id = userId;
					this.emit('user_created', userObj);
				});
			});
		}
	});
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			console.error(error.stack);
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
